tasks.withType(PublishToMavenRepository) { it.dependsOn test }

//ext.snapshotUrl = "https://artifactory.openlattice.com/artifactory/libs-snapshot-local"
//ext.releaseUrl = "https://artifactory.openlattice.com/artifactory/libs-release-local"
ext.githubPackageUrl = "https://maven.pkg.github.com/methodic-labs/methodic"
ext.sonatypeMasterUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
ext.sonatypeSnapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"


def jarname = ""
def scmUrl = ""
def connectionUrl = ""
def developerConnectionUrl = ""

if (project.hasProperty('projectName') && project.hasProperty('scmUrl')) {
    scmUrl = ext.scmUrl
    connectionUrl = ext.connectionUrl
    developerConnectionUrl = ext.developerConnectionUrl
    jarname = ext.projectName
} else {
    jarname = project.name
    scmUrl = "scm:git:https://github.com/methodic-labs/${project.name}.git"
    connectionUrl = "scm:git:https://github.com/methodic-labs/${project.name}.git"
    developerConnectionUrl = "scm:git:https://github.com/methodic-labs/${project.name}.git"
}

println "Basename for jars will be: " + jarname

def stdout = new ByteArrayOutputStream()

exec {
    commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
    standardOutput = stdout
}
def maybeBranch = stdout.toString().trim()
def ghBranch = System.getenv("GITHUB_REF")
println "Branch from git: " + maybeBranch
println "Github ref: " + ghBranch
if( ghBranch != null ) {
    ghBranch = ghBranch.substring(ghBranch.lastIndexOf('/') + 1)
}

if (maybeBranch == null && ghBranch == null) {
    println "Unable to detect bamboo branch from git for ${jarname}. Publishing will likely not work."
}

def branch = ghBranch ?: maybeBranch

println "Branch detected as: " + branch
println "Version detected as: " + version
println "Full version detected as: " + ext.fullVersion

task sourcesJar(type: Jar) {
    classifier = 'sources'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    archiveClassifier.set('tests')
    from sourceSets.test.output
}

configurations {
    tests
    published.extendsFrom tests, archives
}

artifacts {
    archives sourcesJar
    // archives jar
    archives javadocJar
    tests testJar
}


archivesBaseName = jarname

ext."signing.password" = System.getenv("SIGNING_KEY_PASSPHRASE")

configurations {
    pom
}

signing {
    sign configurations.archives
    sign configurations.pom
}

if (ext."signing.password" != null) {
    println "Signing information detected..."
    if (branch == "develop") {
        println "Publishing snapshot to github packages."
        publishing {
            repositories {
//                maven {
//                    url sonatypeSnapshotUrl
//                    credentials {
//                        username = System.getenv("SONATYPE_USERNAME")
//                        password = System.getenv("SONATYPE_PASSWORD")
//                    }
//                }
                maven {
                    url githubPackageUrl
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name jarname

                            scm {
                                url scmUrl
                                connection connectionUrl
                                developerConnection developerConnectionUrl
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'methodic'
                                    name 'Methodic Team'
                                    email 'support@getmethodic.com'
                                }
                            }
                        }
                    }
                    from components.java
                    // artifact ('README.md') {
                    //    classifier = 'README'
                    //    extension  = 'md'
                    // }

                    artifact javadocJar
                    artifact sourcesJar
                    artifact testJar
                }
            }
            signing {
                sign publishing.publications.mavenJava
            }
        }
    } else if ((branch.startsWith("release/") || branch == "main" || branch == "master") && !version.contains('-SNAPSHOT')) {
        publishing {
            repositories {
                // maven {
                //     url sonatypeMasterUrl
                //     credentials {
                //        username = System.getenv(SONATYPE_USERNAME)
                //        password = System.getenv(SONATYPE_PASSWORD)
                //     }
                // }
                maven {
                    url githubPackageUrl
                    credentials {
                        username = System.getenv("MAVEN_USERNAME")
                        password = System.getenv("MAVEN_PASSWORD")
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name jarname

                            scm {
                                url scmUrl
                                connection connectionUrl
                                developerConnection developerConnectionUrl
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'methodic'
                                    name 'Methodic Team'
                                    email 'support@getmethodic.com'
                                }
                            }
                        }
                    }
                    from components.java
                    //artifact ('README.md') {
                    //classifier = 'README'
                    //extension  = 'md'
                    //}

                    artifact javadocJar
                    artifact sourcesJar
                    artifact testJar

                }
            }
        }
        signing {
            sign publishing.publications.mavenJava
        }
    }

}